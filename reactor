#!/usr/bin/python2.7

'''
Launcher for the reactor system.
'''

# allow importing directly from src/
import sys
sys.path.append('src')

# parse command-line arguments
from argparse import ArgumentParser

parser = ArgumentParser(description='Reactor system launcher')
parser.add_argument('-v', '--verbose', metavar='MODULE',
    action='append', help='verbose logging for specified modules')
parser.add_argument('-d', '--debug', metavar='MODULE',
    action='append', help='debug logging for specified modules')
parser.add_argument('command', metavar='COMMAND',
    choices=['db', 'unittest'], help='command to launch')
parser.add_argument('-l', '--log', metavar='LOG',
    help='save log to file')

args = parser.parse_args()

# configure the root logger to accept all records
import logging
logger = logging.getLogger()
logger.setLevel(logging.NOTSET)

formatter = logging.Formatter('%(asctime)s\t[%(name)s]'
    '%(pathname)s:%(lineno)d\t%(levelname)s:\t%(message)s')

# set up colored logging to console
from rainbow_logging_handler import RainbowLoggingHandler
console_handler = RainbowLoggingHandler(sys.stderr)
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# set up logging to file for all records
log_path = args.log
if not log_path:
    import os, datetime
    name = '{}-{:%Y%m%d-%H%M%S}.log'.format(
        os.path.basename(__file__), datetime.datetime.now())
    log_path = os.path.join('log', name)

    # create the log directory if needed
    if not os.path.exists('log'):
        os.mkdir('log')

handler = logging.FileHandler(log_path)
handler.setFormatter(formatter)
logger.addHandler(handler)

# install level filter for console output only
from util.log import LevelFilter
lf = LevelFilter()
console_handler.addFilter(lf)

# default console output to WARN level
lf.add('', logging.WARN)

# process logging verbosity flags
for m in args.verbose or []:
    lf.add(m, logging.INFO)

for m in args.debug or []:
    lf.add(m, logging.DEBUG)

# launch the target command
if args.command == 'db':
    from pensive import PensiveServer

    server = PensiveServer(8000)
    server.run()

elif args.command == 'unittest':
    import unittest
    unittest.main(argv=[__file__, 'discover', '-f', '-v'])
